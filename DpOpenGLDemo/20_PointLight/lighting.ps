#version 330

const int MAX_POINT_LIGHTS = 2;

in vec2 TexCoord0;
in vec3 Normal0;
in vec3 WorldPos0;

out vec4 FragColor;

struct BaseLight
{
	vec3 color;
	float ambientIntensity;
	float diffuseIntensity;
};

struct DirectionalLight
{
	BaseLight base;
	vec3 direction;
};

struct Attenuation
{
	float kc;
	float kl;
	float kq;
};

struct PointLight
{
	BaseLight base;
	vec3 position;
	Attenuation atten;
};

uniform int gNumPointLights;
uniform DirectionalLight gDirectionalLight;
uniform PointLight gPointLights[MAX_POINT_LIGHTS];
uniform sampler2D gSampler;
uniform vec3 gEyeWorldPos;
uniform float gSpecularIntensity;
uniform float gSpecularPower;

vec4 CalcLightInternal(BaseLight light, vec3 lightDirection, vec3 normal)
{
	vec4 ambientColor = vec4(light.color * light.ambientIntensity, 1.0f);
	
	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);
	float k = dot(-lightDirection, normal);
	if (k > 0)
	{
		diffuseColor = vec4(light.color * light.diffuseIntensity * k, 1.0f);

		vec3 vertexToEye = normalize(gEyeWorldPos - WorldPos0);
		vec3 lightReflect = normalize(lightDirection - 2 * normal * dot(normal, lightDirection));
		k = dot(vertexToEye, lightReflect);
		if (k > 0)
		{
			k = pow(k, gSpecularPower);
			specularColor = vec4(light.color * gSpecularIntensity * k, 1.0f);
		}
	}

	return (ambientColor + diffuseColor + specularColor);
}

vec4 CalcDirectionLight(vec3 normal)
{
	return CalcLightInternal(gDirectionalLight.base, gDirectionalLight.direction, normal);
}

vec4 CalcPointLight(int index, vec3 normal)
{
	vec3 lightDirection = WorldPos0 - gPointLights[index].position;
	float distance = length(lightDirection);
	lightDirection = normalize(lightDirection);

	vec4 color = CalcLightInternal(gPointLights[index].base, lightDirection, normal);
	float k = gPointLights[index].atten.kc + gPointLights[index].atten.kl * distance + gPointLights[index].atten.kq * distance * distance;

	return color / k;
}

void main()
{
	vec3 normal = normalize(Normal0);
	vec4 totalLight = CalcDirectionLight(normal);
	
	for (int i = 0; i < gNumPointLights; ++i)
	{
		totalLight += CalcPointLight(i, normal);
	}

	FragColor = texture2D(gSampler, TexCoord0.xy) * totalLight;
}