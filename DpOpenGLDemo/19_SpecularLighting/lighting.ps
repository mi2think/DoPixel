#version 330

in vec2 TexCoord0;
in vec3 Normal0;
in vec3 WorldPos0;

uniform sampler2D gSampler;

uniform vec3 gEyeWorldPos;
uniform float gSpecularIntensity;
uniform float gSpecularPower;

struct DirectionalLight
{
	vec3 color;
	float ambientIntensity;
	vec3 direction;
	float diffuseIntensity;
};

uniform DirectionalLight gDirectionalLight;

void main()
{
	vec3 Normal = normalize(Normal0);
	vec4 ambientColor = vec4(gDirectionalLight.color * gDirectionalLight.ambientIntensity, 1.0f);
	
	vec4 diffuseColor = vec4(0, 0, 0, 0);
	vec4 specularColor = vec4(0, 0, 0, 0);
	float k = dot(-gDirectionalLight.direction, Normal);
	if (k > 0)
	{
		diffuseColor = vec4(gDirectionalLight.color * gDirectionalLight.diffuseIntensity * k, 1.0f);
		
		vec3 vertexToEye = normalize(gEyeWorldPos - WorldPos0);
		vec3 lightReflect = normalize(gDirectionalLight.direction - 2 * Normal * dot(Normal, gDirectionalLight.direction));
		k = dot(vertexToEye, lightReflect);
		if (k > 0)
		{
			k = pow(k, gSpecularPower);
			specularColor = vec4(gDirectionalLight.color * gSpecularIntensity * k, 1.0f);
		}
	}

	gl_FragColor = texture2D(gSampler, TexCoord0.xy) * (ambientColor + diffuseColor + specularColor);
}
